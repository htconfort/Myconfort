import html2pdf from 'html2pdf.js';
import emailjs from 'emailjs-com';
import { Invoice } from '../types';
import { formatCurrency, calculateProductTotal } from '../utils/calculations';

// Configuration EmailJS
const EMAILJS_CONFIG = {
  SERVICE_ID: 'service_ocsxnme',
  TEMPLATE_ID: 'template_yng4k8s',
  USER_ID: 'hvgYUCG9j2lURrt5k',
  PRIVATE_KEY: 'mh3upHQbKrIViyw4T9-S6'
};

export class SeparatePdfEmailService {
  /**
   * Initialise EmailJS
   */
  static initializeEmailJS(): void {
    try {
      emailjs.init(EMAILJS_CONFIG.USER_ID);
      console.log('‚úÖ EmailJS initialis√© pour envoi s√©par√©');
    } catch (error) {
      console.error('‚ùå Erreur initialisation EmailJS:', error);
    }
  }

  /**
   * üìÑ G√âN√àRE LE PDF EN LOCAL avec html2pdf.js (votre script exact)
   */
  static async generateInvoicePDFLocal(invoice: Invoice): Promise<void> {
    console.log('üìÑ G√âN√âRATION PDF LOCAL avec votre script exact');
    
    // Chercher l'√©l√©ment .facture-apercu en priorit√©
    let element = document.querySelector('.facture-apercu') as HTMLElement;
    
    if (!element) {
      // Fallback vers d'autres √©l√©ments
      element = document.getElementById('pdf-preview-content') || 
                document.getElementById('facture-apercu') ||
                document.querySelector('[class*="invoice"]') as HTMLElement;
    }
    
    if (!element) {
      throw new Error('‚ùå Aucun √©l√©ment de facture trouv√© pour la g√©n√©ration PDF');
    }

    // Attendre que l'√©l√©ment soit rendu
    await this.waitForElementToRender(element);

    // üìã CONFIGURATION EXACTE DE VOTRE SCRIPT
    const opt = {
      margin: 0,
      filename: `facture_MYCONFORT_${invoice.invoiceNumber}_avec_CGV.pdf`,
      html2canvas: { 
        scale: 2, 
        useCORS: true,
        letterRendering: true,
        allowTaint: true,
        backgroundColor: '#ffffff',
        logging: false,
        width: element.scrollWidth,
        height: element.scrollHeight,
        scrollX: 0,
        scrollY: 0
      },
      jsPDF: { 
        unit: 'mm', 
        format: 'a4', 
        orientation: 'portrait',
        compress: true
      }
    };

    try {
      console.log('üîÑ G√©n√©ration PDF avec votre script exact...');
      
      // Cr√©er un conteneur temporaire avec facture + CGV
      const tempContainer = await this.createFactureWithCGVContainer(invoice, element);
      
      // G√©n√©rer le PDF avec votre script
      await html2pdf().set(opt).from(tempContainer).save();
      
      // Nettoyer le conteneur temporaire
      document.body.removeChild(tempContainer);
      
      console.log('‚úÖ PDF g√©n√©r√© et t√©l√©charg√© avec succ√®s (Facture + CGV MYCONFORT)');
      return;
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration PDF avec CGV:', error);
      
      // Fallback: g√©n√©rer seulement la facture
      console.log('üîÑ Fallback: g√©n√©ration PDF facture seule...');
      await html2pdf().set(opt).from(element).save();
      console.log('‚úÖ PDF facture g√©n√©r√© (sans CGV)');
    }
  }

  /**
   * üìß ENVOIE L'EMAIL S√âPAR√âMENT (sans PDF)
   */
  static async sendEmailSeparately(invoice: Invoice): Promise<boolean> {
    try {
      console.log('üìß ENVOI EMAIL S√âPAR√â (sans PDF dans le payload)');
      
      // Initialiser EmailJS
      this.initializeEmailJS();
      
      // Calculer les montants
      const totalAmount = invoice.products.reduce((sum, product) => {
        return sum + calculateProductTotal(
          product.quantity,
          product.priceTTC,
          product.discount,
          product.discountType
        );
      }, 0);

      const acompteAmount = invoice.payment.depositAmount || 0;
      const montantRestant = totalAmount - acompteAmount;

      // Pr√©parer le message personnalis√©
      let message = `Bonjour ${invoice.client.name},\n\n`;
      message += `Votre facture n¬∞${invoice.invoiceNumber} a √©t√© g√©n√©r√©e avec succ√®s.\n\n`;
      message += `üìã D√âTAILS :\n`;
      message += `‚Ä¢ Num√©ro: ${invoice.invoiceNumber}\n`;
      message += `‚Ä¢ Date: ${new Date(invoice.invoiceDate).toLocaleDateString('fr-FR')}\n`;
      
      if (acompteAmount > 0) {
        message += `‚Ä¢ Total TTC: ${formatCurrency(totalAmount)}\n`;
        message += `‚Ä¢ Acompte vers√©: ${formatCurrency(acompteAmount)}\n`;
        message += `‚Ä¢ Montant restant: ${formatCurrency(montantRestant)}\n\n`;
      } else {
        message += `‚Ä¢ Montant total: ${formatCurrency(totalAmount)}\n\n`;
      }
      
      if (invoice.payment.method) {
        message += `üí≥ Mode de paiement: ${invoice.payment.method}\n\n`;
      }
      
      if (invoice.signature) {
        message += '‚úÖ Cette facture a √©t√© sign√©e √©lectroniquement.\n\n';
      }
      
      message += `üìé Le PDF de votre facture avec les conditions g√©n√©rales de vente a √©t√© g√©n√©r√© et t√©l√©charg√© sur votre appareil.\n\n`;
      message += `Pour toute question, contactez-nous :\n`;
      message += `‚Ä¢ T√©l√©phone: 04 68 50 41 45\n`;
      message += `‚Ä¢ Email: myconfort@gmail.com\n\n`;
      message += `Cordialement,\n${invoice.advisorName || 'L\'√©quipe MYCONFORT'}`;

      // Param√®tres pour le template (SANS PDF)
      const templateParams = {
        // Destinataire
        to_email: invoice.client.email,
        to_name: invoice.client.name,
        
        // Exp√©diteur
        from_name: 'MYCONFORT',
        reply_to: 'myconfort@gmail.com',
        
        // Sujet et message
        subject: `Facture MYCONFORT n¬∞${invoice.invoiceNumber}`,
        message: message,
        
        // Informations facture
        invoice_number: invoice.invoiceNumber,
        invoice_date: new Date(invoice.invoiceDate).toLocaleDateString('fr-FR'),
        total_amount: formatCurrency(totalAmount),
        deposit_amount: acompteAmount > 0 ? formatCurrency(acompteAmount) : '',
        remaining_amount: acompteAmount > 0 ? formatCurrency(montantRestant) : '',
        has_signature: invoice.signature ? 'Oui' : 'Non',
        
        // Informations client
        client_name: invoice.client.name,
        client_email: invoice.client.email,
        client_address: invoice.client.address,
        client_city: invoice.client.city,
        client_postal_code: invoice.client.postalCode,
        client_phone: invoice.client.phone,
        
        // Informations entreprise
        company_name: 'MYCONFORT',
        company_address: '88 Avenue des Ternes, 75017 Paris',
        company_phone: '04 68 50 41 45',
        company_email: 'myconfort@gmail.com',
        company_siret: '824 313 530 00027',
        
        // Conseiller
        advisor_name: invoice.advisorName || 'MYCONFORT',
        
        // Mode de paiement
        payment_method: invoice.payment.method || 'Non sp√©cifi√©',
        
        // Statut PDF (g√©n√©r√© localement)
        has_pdf: 'false', // Pas de PDF dans l'email
        pdf_note: 'PDF g√©n√©r√© et t√©l√©charg√© localement avec les conditions g√©n√©rales de vente MYCONFORT',
        
        // M√©tadonn√©es
        generated_date: new Date().toLocaleDateString('fr-FR'),
        generated_time: new Date().toLocaleTimeString('fr-FR'),
        
        // Produits
        products_count: invoice.products.length,
        products_summary: invoice.products.map(p => `${p.quantity}x ${p.name}`).join(', ')
      };

      console.log('üìß Envoi email de notification (sans PDF)...');
      
      const response = await emailjs.send(
        EMAILJS_CONFIG.SERVICE_ID,
        EMAILJS_CONFIG.TEMPLATE_ID,
        templateParams,
        EMAILJS_CONFIG.USER_ID
      );

      console.log('‚úÖ Email de notification envoy√© avec succ√®s:', response);
      return true;

    } catch (error: any) {
      console.error('‚ùå Erreur lors de l\'envoi de l\'email s√©par√©:', error);
      throw new Error(`Erreur d'envoi email: ${error.message}`);
    }
  }

  /**
   * üöÄ M√âTHODE PRINCIPALE : G√©n√®re le PDF ET envoie l'email s√©par√©ment
   */
  static async generatePDFAndSendEmail(invoice: Invoice): Promise<{ pdfGenerated: boolean; emailSent: boolean; message: string }> {
    try {
      console.log('üöÄ PROCESSUS S√âPAR√â : PDF LOCAL + EMAIL SANS PAYLOAD');
      
      let pdfGenerated = false;
      let emailSent = false;
      let message = '';

      // √âtape 1: G√©n√©rer le PDF localement
      try {
        console.log('üìÑ √âtape 1: G√©n√©ration PDF local...');
        await this.generateInvoicePDFLocal(invoice);
        pdfGenerated = true;
        message += '‚úÖ PDF g√©n√©r√© et t√©l√©charg√© avec succ√®s (Facture + CGV MYCONFORT)\n';
      } catch (error) {
        console.error('‚ùå Erreur g√©n√©ration PDF:', error);
        message += '‚ùå Erreur lors de la g√©n√©ration du PDF\n';
      }

      // √âtape 2: Envoyer l'email de notification
      try {
        console.log('üìß √âtape 2: Envoi email de notification...');
        emailSent = await this.sendEmailSeparately(invoice);
        message += '‚úÖ Email de notification envoy√© avec succ√®s\n';
      } catch (error) {
        console.error('‚ùå Erreur envoi email:', error);
        message += '‚ùå Erreur lors de l\'envoi de l\'email\n';
      }

      // R√©sultat final
      if (pdfGenerated && emailSent) {
        message += '\nüéâ Processus termin√© avec succ√®s !\n';
        message += `üìé PDF t√©l√©charg√©: facture_MYCONFORT_${invoice.invoiceNumber}_avec_CGV.pdf\n`;
        message += `üìß Email envoy√© √†: ${invoice.client.email}`;
      } else if (pdfGenerated && !emailSent) {
        message += '\n‚ö†Ô∏è PDF g√©n√©r√© mais email non envoy√©';
      } else if (!pdfGenerated && emailSent) {
        message += '\n‚ö†Ô∏è Email envoy√© mais PDF non g√©n√©r√©';
      } else {
        message += '\n‚ùå √âchec complet du processus';
      }

      return {
        pdfGenerated,
        emailSent,
        message
      };

    } catch (error: any) {
      console.error('‚ùå Erreur processus s√©par√©:', error);
      return {
        pdfGenerated: false,
        emailSent: false,
        message: `‚ùå Erreur: ${error.message}`
      };
    }
  }

  /**
   * üìã CR√âER UN CONTENEUR TEMPORAIRE AVEC FACTURE + CGV MYCONFORT
   */
  private static async createFactureWithCGVContainer(invoice: Invoice, factureElement: HTMLElement): Promise<HTMLElement> {
    console.log('üìã Cr√©ation du conteneur temporaire : PAGE 1 (Facture) + PAGE 2 (CGV MYCONFORT)...');
    
    // Cr√©er un conteneur temporaire
    const tempContainer = document.createElement('div');
    tempContainer.style.position = 'absolute';
    tempContainer.style.left = '-9999px';
    tempContainer.style.top = '0';
    tempContainer.style.width = '210mm';
    tempContainer.style.backgroundColor = 'white';
    tempContainer.style.fontFamily = 'Inter, sans-serif';
    tempContainer.style.fontSize = '12px';
    tempContainer.style.lineHeight = '1.5';
    tempContainer.style.color = 'black';
    
    // PAGE 1: Cloner la facture existante
    console.log('üìÑ PAGE 1 : Clonage de votre facture (.facture-apercu)...');
    const factureClone = factureElement.cloneNode(true) as HTMLElement;
    factureClone.style.pageBreakAfter = 'always';
    factureClone.style.minHeight = '297mm';
    factureClone.style.backgroundColor = 'white';
    factureClone.style.padding = '10mm';
    tempContainer.appendChild(factureClone);
    
    // PAGE 2: Cr√©er les CGV MYCONFORT
    console.log('üìÑ PAGE 2 : Cr√©ation des CGV MYCONFORT...');
    const cgvPage = this.createCGVMyconfortPage(invoice);
    tempContainer.appendChild(cgvPage);
    
    // Ajouter au DOM temporairement
    document.body.appendChild(tempContainer);
    
    // Attendre le rendu
    await new Promise(resolve => setTimeout(resolve, 500));
    
    console.log('‚úÖ Conteneur temporaire cr√©√© : 2 pages pr√™tes');
    return tempContainer;
  }

  /**
   * üìã CR√âER LA PAGE CGV MYCONFORT (PAGE 2)
   */
  private static createCGVMyconfortPage(invoice: Invoice): HTMLElement {
    console.log('üìã Cr√©ation de la page CGV MYCONFORT...');
    
    const cgvPage = document.createElement('div');
    cgvPage.style.minHeight = '297mm';
    cgvPage.style.width = '210mm';
    cgvPage.style.padding = '10mm';
    cgvPage.style.backgroundColor = 'white';
    cgvPage.style.pageBreakBefore = 'always';
    cgvPage.style.fontFamily = 'Inter, sans-serif';
    cgvPage.style.fontSize = '9px';
    cgvPage.style.lineHeight = '1.3';
    cgvPage.style.color = 'black';
    cgvPage.style.boxSizing = 'border-box';
    
    cgvPage.innerHTML = `
      <!-- En-t√™te CGV MYCONFORT -->
      <div style="background: linear-gradient(135deg, #477A0C, #5A8F0F); color: #F2EFE2; padding: 12px; text-align: center; margin-bottom: 15px; border-radius: 6px;">
        <h1 style="font-size: 16px; font-weight: bold; margin: 0;">CONDITIONS G√âN√âRALES DE VENTE</h1>
        <p style="font-size: 11px; margin: 3px 0 0 0;">MYCONFORT - Vente de matelas et literie</p>
      </div>
      
      <!-- Articles CGV MYCONFORT en 2 colonnes -->
      <div style="columns: 2; column-gap: 12px; font-size: 8px; line-height: 1.2;">
        
        <div style="margin-bottom: 8px; break-inside: avoid;">
          <h3 style="color: #477A0C; font-weight: bold; font-size: 9px; margin: 0 0 3px 0;">ART. 1 - LIVRAISON</h3>
          <p style="margin: 0; text-align: justify;">Une fois la commande exp√©di√©e, vous serez contact√© par SMS ou mail pour programmer la livraison en fonction de vos disponibilit√©s (√† la journ√©e ou demi-journ√©e). Le transporteur livre le produit au pas de porte ou en bas de l'immeuble. Veuillez v√©rifier que les dimensions du produit permettent son passage dans les escaliers, couloirs et portes. Aucun service d'installation ou de reprise de l'ancienne literie n'est pr√©vu.</p>
        </div>
        
        <div style="margin-bottom: 8px; break-inside: avoid;">
          <h3 style="color: #477A0C; font-weight: bold; font-size: 9px; margin: 0 0 3px 0;">ART. 2 - D√âLAIS DE LIVRAISON</h3>
          <p style="margin: 0; text-align: justify;">Les d√©lais de livraison sont donn√©s √† titre indicatif et ne constituent pas un engagement ferme. En cas de retard, aucune indemnit√© ou annulation ne sera accept√©e, notamment en cas de force majeure. Nous d√©clinons toute responsabilit√© en cas de d√©lai d√©pass√©.</p>
        </div>
        
        <div style="margin-bottom: 8px; break-inside: avoid;">
          <h3 style="color: #477A0C; font-weight: bold; font-size: 9px; margin: 0 0 3px 0;">ART. 3 - RISQUES DE TRANSPORT</h3>
          <p style="margin: 0; text-align: justify;">Les marchandises voyagent aux risques du destinataire. En cas d'avarie ou de perte, il appartient au client de faire les r√©serves n√©cessaires obligatoires sur le bordereau du transporteur.</p>
        </div>
        
        <div style="margin-bottom: 8px; break-inside: avoid;">
          <h3 style="color: #477A0C; font-weight: bold; font-size: 9px; margin: 0 0 3px 0;">ART. 4 - ACCEPTATION DES CONDITIONS</h3>
          <p style="margin: 0; text-align: justify;">Toute livraison implique l'acceptation des pr√©sentes conditions. Le transporteur livre √† l'adresse indiqu√©e sans monter les √©tages. Le client est responsable de v√©rifier et d'accepter les marchandises lors de la livraison.</p>
        </div>
        
        <div style="margin-bottom: 8px; break-inside: avoid;">
          <h3 style="color: #477A0C; font-weight: bold; font-size: 9px; margin: 0 0 3px 0;">ART. 5 - R√âCLAMATIONS</h3>
          <p style="margin: 0; text-align: justify;">Les r√©clamations concernant la qualit√© des marchandises doivent √™tre formul√©es par √©crit dans les huit jours suivant la livraison, par lettre recommand√©e avec accus√© de r√©ception.</p>
        </div>
        
        <div style="margin-bottom: 8px; break-inside: avoid;">
          <h3 style="color: #477A0C; font-weight: bold; font-size: 9px; margin: 0 0 3px 0;">ART. 6 - RETOURS</h3>
          <p style="margin: 0; text-align: justify;">Aucun retour de marchandises ne sera accept√© sans notre accord √©crit pr√©alable.</p>
        </div>
        
        <div style="margin-bottom: 8px; break-inside: avoid;">
          <h3 style="color: #477A0C; font-weight: bold; font-size: 9px; margin: 0 0 3px 0;">ART. 7 - TAILLES DES MATELAS</h3>
          <p style="margin: 0; text-align: justify;">Les dimensions des matelas peuvent varier de +/- 5 cm en raison de la thermosensibilit√© des mousses visco√©lastiques. Les tailles standards sont donn√©es √† titre indicatif.</p>
        </div>
        
        <div style="margin-bottom: 8px; break-inside: avoid;">
          <h3 style="color: #477A0C; font-weight: bold; font-size: 9px; margin: 0 0 3px 0;">ART. 8 - ODEUR DES MAT√âRIAUX</h3>
          <p style="margin: 0; text-align: justify;">Les mousses visco√©lastiques naturelles (√† base d'huile de ricin) et les mat√©riaux de conditionnement peuvent √©mettre une l√©g√®re odeur apr√®s d√©ballage.</p>
        </div>
        
        <div style="margin-bottom: 8px; break-inside: avoid;">
          <h3 style="color: #477A0C; font-weight: bold; font-size: 9px; margin: 0 0 3px 0;">ART. 9 - R√àGLEMENTS ET REMISES</h3>
          <p style="margin: 0; text-align: justify;">Sauf accord express, aucun rabais ou escompte ne sera appliqu√© pour paiement comptant.</p>
        </div>
        
        <div style="margin-bottom: 8px; break-inside: avoid;">
          <h3 style="color: #477A0C; font-weight: bold; font-size: 9px; margin: 0 0 3px 0;">ART. 10 - PAIEMENT</h3>
          <p style="margin: 0; text-align: justify;">Les factures sont payables par ch√®que, virement, carte bancaire ou esp√®ce √† r√©ception.</p>
        </div>
        
        <div style="margin-bottom: 8px; break-inside: avoid;">
          <h3 style="color: #477A0C; font-weight: bold; font-size: 9px; margin: 0 0 3px 0;">ART. 11 - P√âNALIT√âS DE RETARD</h3>
          <p style="margin: 0; text-align: justify;">En cas de non-paiement, une majoration de 10% avec un minimum de 300 ‚Ç¨ sera appliqu√©e.</p>
        </div>
        
        <div style="margin-bottom: 8px; break-inside: avoid;">
          <h3 style="color: #477A0C; font-weight: bold; font-size: 9px; margin: 0 0 3px 0;">ART. 12 - EXIGIBILIT√â EN CAS DE NON-PAIEMENT</h3>
          <p style="margin: 0; text-align: justify;">Le non-paiement d'une √©ch√©ance rend imm√©diatement exigible le solde de toutes les √©ch√©ances √† venir.</p>
        </div>
        
        <div style="margin-bottom: 8px; break-inside: avoid;">
          <h3 style="color: #477A0C; font-weight: bold; font-size: 9px; margin: 0 0 3px 0;">ART. 13 - LIVRAISON INCOMPL√àTE OU NON-CONFORME</h3>
          <p style="margin: 0; text-align: justify;">En cas de livraison endommag√©e ou non conforme, mentionnez-le sur le bon de livraison. Contactez-nous sous 72h ouvrables si constat√©e apr√®s le d√©part du transporteur.</p>
        </div>
        
        <div style="margin-bottom: 8px; break-inside: avoid;">
          <h3 style="color: #477A0C; font-weight: bold; font-size: 9px; margin: 0 0 3px 0;">ART. 14 - LITIGES</h3>
          <p style="margin: 0; text-align: justify;">Tout litige sera de la comp√©tence exclusive du Tribunal de Commerce de Perpignan ou du tribunal comp√©tent du prestataire.</p>
        </div>
        
        <div style="margin-bottom: 8px; break-inside: avoid;">
          <h3 style="color: #477A0C; font-weight: bold; font-size: 9px; margin: 0 0 3px 0;">ART. 15 - HORAIRES DE LIVRAISON</h3>
          <p style="margin: 0; text-align: justify;">Les livraisons sont effectu√©es du lundi au vendredi. Une personne majeure doit √™tre pr√©sente. Toute modification d'adresse doit √™tre signal√©e imm√©diatement √† myconfort66@gmail.com.</p>
        </div>
        
      </div>
      
      <!-- Informations l√©gales MYCONFORT -->
      <div style="background: #f8f9fa; padding: 10px; margin-top: 15px; border-radius: 6px; border: 1px solid #dee2e6;">
        <h3 style="color: #477A0C; font-weight: bold; font-size: 10px; margin: 0 0 6px 0;">INFORMATIONS L√âGALES MYCONFORT</h3>
        <div style="font-size: 8px; line-height: 1.3;">
          <p style="margin: 0 0 2px 0;"><strong>MYCONFORT</strong> - SARL au capital de 10 000 ‚Ç¨</p>
          <p style="margin: 0 0 2px 0;">SIRET : 824 313 530 00027 - RCS Paris</p>
          <p style="margin: 0 0 2px 0;">Si√®ge social : 88 Avenue des Ternes, 75017 Paris</p>
          <p style="margin: 0 0 2px 0;">T√©l√©phone : 04 68 50 41 45 - Email : myconfort@gmail.com</p>
          <p style="margin: 0;">Email support : myconfort66@gmail.com</p>
        </div>
      </div>
      
      <!-- Pied de page CGV -->
      <div style="background: linear-gradient(135deg, #477A0C, #5A8F0F); color: #F2EFE2; padding: 10px; text-align: center; margin-top: 15px; border-radius: 6px;">
        <p style="font-weight: bold; font-size: 10px; margin: 0 0 3px 0;">üå∏ MYCONFORT - Conditions G√©n√©rales de Vente</p>
        <p style="font-size: 8px; margin: 0;">Version en vigueur au ${new Date().toLocaleDateString('fr-FR')}</p>
      </div>
    `;
    
    console.log('‚úÖ Page CGV MYCONFORT cr√©√©e');
    return cgvPage;
  }

  /**
   * üïê ATTENDRE QUE L'√âL√âMENT SOIT COMPL√àTEMENT RENDU
   */
  private static async waitForElementToRender(element: HTMLElement): Promise<void> {
    return new Promise((resolve) => {
      const images = element.querySelectorAll('img');
      let loadedImages = 0;
      
      if (images.length === 0) {
        setTimeout(resolve, 100);
        return;
      }
      
      const checkAllImagesLoaded = () => {
        loadedImages++;
        if (loadedImages >= images.length) {
          setTimeout(resolve, 200);
        }
      };
      
      images.forEach((img) => {
        if (img.complete) {
          checkAllImagesLoaded();
        } else {
          img.onload = checkAllImagesLoaded;
          img.onerror = checkAllImagesLoaded;
        }
      });
      
      setTimeout(resolve, 2000);
    });
  }

  /**
   * üß™ TEST DE LA M√âTHODE S√âPAR√âE
   */
  static async testSeparateMethod(invoice: Invoice): Promise<void> {
    console.log('üß™ TEST DE LA M√âTHODE S√âPAR√âE : PDF LOCAL + EMAIL SANS PAYLOAD');
    
    try {
      const result = await this.generatePDFAndSendEmail(invoice);
      
      let alertMessage = 'üß™ TEST DE LA M√âTHODE S√âPAR√âE TERMIN√â\n\n';
      alertMessage += result.message;
      
      if (result.pdfGenerated && result.emailSent) {
        alertMessage += '\n\n‚úÖ Test r√©ussi ! M√©thode s√©par√©e fonctionnelle.';
      } else {
        alertMessage += '\n\n‚ö†Ô∏è Test partiellement r√©ussi. V√©rifiez les d√©tails ci-dessus.';
      }
      
      alert(alertMessage);
      
    } catch (error) {
      console.error('‚ùå Erreur test m√©thode s√©par√©e:', error);
      alert('‚ùå Erreur lors du test de la m√©thode s√©par√©e. V√©rifiez la console pour plus de d√©tails.');
    }
  }
}