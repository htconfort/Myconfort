import { Invoice } from '../types';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

export class AdvancedPDFService {
  /**
   * T√©l√©charge le PDF d'une facture
   */
  static async downloadPDF(invoice: Invoice): Promise<void> {
    try {
      console.log('üîç DEBUG PDF - Donn√©es facture re√ßues:', invoice);
      console.log('üîç DEBUG PDF - Produits:', invoice.products);
      console.log('üîç DEBUG PDF - Client:', invoice.client);
      
      // üö´ VALIDATION : V√©rifier qu'il y a des produits
      if (!invoice.products || invoice.products.length === 0) {
        console.error('‚ùå DEBUG PDF - Aucun produit dans la facture');
        throw new Error('Impossible de g√©n√©rer un PDF sans produits.\n\nVeuillez ajouter au moins un produit √† votre facture avant de t√©l√©charger le PDF.');
      }
      
      // üö´ VALIDATION : V√©rifier les donn√©es client essentielles
      if (!invoice.client.name || !invoice.client.email) {
        console.error('‚ùå DEBUG PDF - Donn√©es client incompl√®tes:', invoice.client);
        throw new Error('Impossible de g√©n√©rer un PDF sans informations client compl√®tes.\n\nVeuillez remplir au minimum le nom et l\'email du client.');
      }
      
      const pdfBlob = await this.getPDFBlob(invoice);
      console.log('üîç DEBUG PDF - Blob g√©n√©r√©:', pdfBlob);
      console.log('üîç DEBUG PDF - Taille du blob:', pdfBlob.size, 'bytes');
      
      // Cr√©er un lien de t√©l√©chargement
      const url = URL.createObjectURL(pdfBlob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `Facture_MYCONFORT_${invoice.invoiceNumber}.pdf`;
      
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      // Nettoyer l'URL
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Erreur lors du t√©l√©chargement PDF:', error);
      throw new Error('Impossible de t√©l√©charger le PDF');
    }
  }

  /**
   * G√©n√®re un blob PDF d'une facture
   */
  static async getPDFBlob(invoice: Invoice): Promise<Blob> {
    try {
      console.log('üîç DEBUG PDF BLOB - D√©but g√©n√©ration pour facture:', invoice.invoiceNumber);
      
      // üö´ VALIDATION : Double v√©rification des produits
      if (!invoice.products || invoice.products.length === 0) {
        console.error('‚ùå DEBUG PDF BLOB - Aucun produit pour g√©n√©ration blob');
        throw new Error('Impossible de g√©n√©rer le PDF : aucun produit dans la facture');
      }
      
      // Chercher l'√©l√©ment de la facture
      const element = document.querySelector('.facture-apercu') || 
                     document.getElementById('pdf-preview-content') ||
                     document.querySelector('[data-invoice-preview]');
      
      console.log('üîç DEBUG PDF BLOB - √âl√©ment trouv√©:', element);
      console.log('üîç DEBUG PDF BLOB - Contenu HTML:', element?.innerHTML?.substring(0, 200) + '...');
      
      if (!element) {
        throw new Error('√âl√©ment facture non trouv√© pour la g√©n√©ration PDF');
      }

      // Cr√©er le PDF avec jsPDF pour g√©rer les pages multiples
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4'
      });

      console.log('üîç DEBUG PDF BLOB - jsPDF initialis√©');
      // PAGE 1 - FACTURE
      const invoicePage = element.querySelector('.invoice-page') as HTMLElement;
      console.log('üîç DEBUG PDF BLOB - Page facture trouv√©e:', invoicePage);
      
      if (invoicePage) {
        console.log('üîç DEBUG PDF BLOB - Capture page facture...');
        const canvas1 = await html2canvas(invoicePage, {
          scale: 2,
          useCORS: true,
          allowTaint: true,
          backgroundColor: '#ffffff',
          logging: false,
          width: invoicePage.scrollWidth,
          height: invoicePage.scrollHeight
        });

        console.log('üîç DEBUG PDF BLOB - Canvas facture cr√©√©:', canvas1.width, 'x', canvas1.height);
        
        const imgData1 = canvas1.toDataURL('image/jpeg', 0.95);
        console.log('üîç DEBUG PDF BLOB - Image data facture:', imgData1.substring(0, 50) + '...');
        
        const pdfWidth = pdf.internal.pageSize.getWidth();
        const pdfHeight = pdf.internal.pageSize.getHeight();
        const imgWidth1 = canvas1.width;
        const imgHeight1 = canvas1.height;
        const ratio1 = Math.min(pdfWidth / imgWidth1, pdfHeight / imgHeight1);
        const imgX1 = (pdfWidth - imgWidth1 * ratio1) / 2;
        const imgY1 = 0;

        pdf.addImage(imgData1, 'JPEG', imgX1, imgY1, imgWidth1 * ratio1, imgHeight1 * ratio1);
        console.log('üîç DEBUG PDF BLOB - Page facture ajout√©e au PDF');
      }

      // PAGE 2 - CONDITIONS G√âN√âRALES DE VENTE
      const termsPage = element.querySelector('.terms-page') as HTMLElement;
      console.log('üîç DEBUG PDF BLOB - Page CGV trouv√©e:', termsPage);
      
      if (termsPage) {
        // Ajouter une nouvelle page
        pdf.addPage();
        console.log('üîç DEBUG PDF BLOB - Nouvelle page ajout√©e pour CGV');
        
        const canvas2 = await html2canvas(termsPage, {
          scale: 2,
          useCORS: true,
          allowTaint: true,
          backgroundColor: '#ffffff',
          logging: false,
          width: termsPage.scrollWidth,
          height: termsPage.scrollHeight
        });

        console.log('üîç DEBUG PDF BLOB - Canvas CGV cr√©√©:', canvas2.width, 'x', canvas2.height);
        
        const imgData2 = canvas2.toDataURL('image/jpeg', 0.95);
        console.log('üîç DEBUG PDF BLOB - Image data CGV:', imgData2.substring(0, 50) + '...');
        
        const imgWidth2 = canvas2.width;
        const imgHeight2 = canvas2.height;
        const ratio2 = Math.min(pdfWidth / imgWidth2, pdfHeight / imgHeight2);
        const imgX2 = (pdfWidth - imgWidth2 * ratio2) / 2;
        const imgY2 = 0;

        pdf.addImage(imgData2, 'JPEG', imgX2, imgY2, imgWidth2 * ratio2, imgHeight2 * ratio2);
        console.log('üîç DEBUG PDF BLOB - Page CGV ajout√©e au PDF');
      }

      // Retourner le blob
      const finalBlob = pdf.output('blob');
      console.log('üîç DEBUG PDF BLOB - Blob final g√©n√©r√©:', finalBlob.size, 'bytes');
      return finalBlob;
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration du blob PDF:', error);
      console.error('‚ùå Stack trace:', error.stack);
      throw new Error('Impossible de g√©n√©rer le PDF');
    }
  }

  /**
   * G√©n√®re un PDF en base64
   */
  static async getPDFBase64(invoice: Invoice): Promise<string> {
    try {
      const pdfBlob = await this.getPDFBlob(invoice);
      
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => {
          const result = reader.result as string;
          resolve(result);
        };
        reader.onerror = () => reject(new Error('Erreur lecture du blob PDF'));
        reader.readAsDataURL(pdfBlob);
      });
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration PDF base64:', error);
      throw new Error('Impossible de g√©n√©rer le PDF en base64');
    }
  }
}