import { Invoice } from '../types';
import { formatCurrency, calculateProductTotal } from '../utils/calculations';
import { AdvancedPDFService } from './advancedPdfService';

export interface GoogleAppsScriptResponse {
  success: boolean;
  message: string;
  emailSent?: boolean;
  error?: string;
}

export class GoogleAppsScriptService {
  // üîë VOTRE ID DE D√âPLOIEMENT GOOGLE APPS SCRIPT
  private static readonly SCRIPT_ID = 'AKfycbyDyrwJROg17hISp3PIN_d_OXB6XjbeIe1yQo_GxBZSouomR8IJ4a2aMC0rDD0vnkWB';
  private static readonly SCRIPT_URL = `https://script.google.com/macros/s/${GoogleAppsScriptService.SCRIPT_ID}/exec`;

  /**
   * üìß Envoie la facture avec PDF via Google Apps Script
   */
  static async sendInvoiceWithPDF(invoice: Invoice, customMessage?: string): Promise<boolean> {
    try {
      console.log('üöÄ ENVOI FACTURE VIA GOOGLE APPS SCRIPT');
      console.log('üîó Script URL:', GoogleAppsScriptService.SCRIPT_URL);
      
      // √âtape 1: G√©n√©rer le PDF identique √† l'aper√ßu
      console.log('üìÑ G√©n√©ration du PDF identique...');
      const pdfDoc = await AdvancedPDFService.generateInvoicePDF(invoice);
      const pdfBlob = pdfDoc.output('blob');
      const pdfSizeKB = Math.round(pdfBlob.size / 1024);
      
      // Convertir le PDF en base64
      const pdfBase64 = await this.blobToBase64(pdfBlob);
      
      // √âtape 2: Calculer les montants
      const totalAmount = invoice.products.reduce((sum, product) => {
        return sum + calculateProductTotal(
          product.quantity,
          product.priceTTC,
          product.discount,
          product.discountType
        );
      }, 0);

      const acompteAmount = invoice.payment.depositAmount || 0;
      const montantRestant = totalAmount - acompteAmount;

      // √âtape 3: Pr√©parer le message personnalis√©
      let emailMessage = customMessage || this.generateDefaultMessage(invoice, totalAmount, acompteAmount, montantRestant);

      // √âtape 4: Pr√©parer les donn√©es pour Google Apps Script
      const requestData = {
        // Informations destinataire
        email: invoice.client.email,
        name: invoice.client.name,
        
        // Informations facture
        invoiceNumber: invoice.invoiceNumber,
        invoiceDate: new Date(invoice.invoiceDate).toLocaleDateString('fr-FR'),
        totalAmount: formatCurrency(totalAmount),
        
        // PDF en base64
        pdfData: pdfBase64.split(',')[1], // Enlever le pr√©fixe data:application/pdf;base64,
        pdfFilename: `facture_${invoice.invoiceNumber}.pdf`,
        pdfSize: pdfSizeKB,
        
        // Message personnalis√©
        message: emailMessage,
        
        // Informations entreprise
        companyName: 'MYCONFORT',
        companyAddress: '88 Avenue des Ternes, 75017 Paris',
        companyPhone: '04 68 50 41 45',
        companyEmail: 'myconfort@gmail.com',
        companySiret: '824 313 530 00027',
        companyWebsite: 'https://www.htconfort.com',
        
        // Informations client d√©taill√©es
        clientAddress: `${invoice.client.address}, ${invoice.client.postalCode} ${invoice.client.city}`,
        clientPhone: invoice.client.phone,
        
        // Informations paiement et acompte
        paymentMethod: invoice.payment.method || 'Non sp√©cifi√©',
        depositAmount: acompteAmount > 0 ? formatCurrency(acompteAmount) : '',
        remainingAmount: acompteAmount > 0 ? formatCurrency(montantRestant) : '',
        
        // Informations conseiller
        advisorName: invoice.advisorName || 'MYCONFORT',
        
        // M√©tadonn√©es
        appName: 'MYCONFORT - FactuSign Pro',
        generatedDate: new Date().toLocaleDateString('fr-FR'),
        generatedTime: new Date().toLocaleTimeString('fr-FR'),
        
        // Signature si pr√©sente
        hasSigned: !!invoice.signature,
        signatureStatus: invoice.signature ? 'Sign√© √©lectroniquement' : 'Non sign√©',
        
        // Informations produits (r√©sum√©)
        productsCount: invoice.products.length,
        hasDiscount: invoice.products.some(p => p.discount > 0)
      };

      // √âtape 5: Envoyer la requ√™te √† Google Apps Script
      console.log('üì§ Envoi vers Google Apps Script...');
      console.log('üìä Taille PDF:', pdfSizeKB, 'KB');
      console.log('üìß Destinataire:', invoice.client.email);

      const response = await fetch(GoogleAppsScriptService.SCRIPT_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
        mode: 'cors' // Important pour les requ√™tes cross-origin
      });

      // √âtape 6: Traiter la r√©ponse
      if (!response.ok) {
        throw new Error(`Erreur HTTP: ${response.status} ${response.statusText}`);
      }

      const result = await response.text();
      console.log('üì® R√©ponse Google Apps Script:', result);

      // V√©rifier si l'envoi a r√©ussi
      if (result.includes('Email envoy√©') || result.includes('success') || result.includes('OK')) {
        console.log('‚úÖ Email envoy√© avec succ√®s via Google Apps Script !');
        return true;
      } else {
        console.error('‚ùå √âchec de l\'envoi:', result);
        return false;
      }

    } catch (error: any) {
      console.error('‚ùå Erreur lors de l\'envoi via Google Apps Script:', error);
      console.error('üîç D√©tails:', {
        scriptId: GoogleAppsScriptService.SCRIPT_ID,
        scriptUrl: GoogleAppsScriptService.SCRIPT_URL,
        error: error.message
      });
      return false;
    }
  }

  /**
   * üì∏ Partage l'aper√ßu de la facture via Google Apps Script
   */
  static async sharePreviewViaScript(
    invoice: Invoice, 
    imageDataUrl: string, 
    imageSizeKB: number, 
    format: string = 'png'
  ): Promise<boolean> {
    try {
      console.log('üì∏ PARTAGE APER√áU VIA GOOGLE APPS SCRIPT');
      
      // Calculer les montants
      const totalAmount = invoice.products.reduce((sum, product) => {
        return sum + calculateProductTotal(
          product.quantity,
          product.priceTTC,
          product.discount,
          product.discountType
        );
      }, 0);

      const acompteAmount = invoice.payment.depositAmount || 0;
      const montantRestant = totalAmount - acompteAmount;

      // Message pour l'aper√ßu
      let previewMessage = `Bonjour ${invoice.client.name},\n\n`;
      previewMessage += `Voici l'aper√ßu de votre facture n¬∞${invoice.invoiceNumber} tel qu'il appara√Æt dans notre syst√®me MYCONFORT.\n\n`;
      previewMessage += `üìã D√âTAILS :\n`;
      previewMessage += `‚Ä¢ Num√©ro: ${invoice.invoiceNumber}\n`;
      previewMessage += `‚Ä¢ Date: ${new Date(invoice.invoiceDate).toLocaleDateString('fr-FR')}\n`;
      
      if (acompteAmount > 0) {
        previewMessage += `‚Ä¢ Total TTC: ${formatCurrency(totalAmount)}\n`;
        previewMessage += `‚Ä¢ Acompte vers√©: ${formatCurrency(acompteAmount)}\n`;
        previewMessage += `‚Ä¢ Montant restant: ${formatCurrency(montantRestant)}\n\n`;
      } else {
        previewMessage += `‚Ä¢ Montant total: ${formatCurrency(totalAmount)}\n\n`;
      }
      
      if (invoice.signature) {
        previewMessage += '‚úÖ Cette facture a √©t√© sign√©e √©lectroniquement.\n\n';
      }
      
      previewMessage += `üéØ L'image ci-jointe vous montre exactement l'aper√ßu de votre facture.\n\n`;
      previewMessage += `Cordialement,\n${invoice.advisorName || 'L\'√©quipe MYCONFORT'}`;

      // Pr√©parer les donn√©es pour Google Apps Script
      const requestData = {
        // Type de requ√™te
        requestType: 'sharePreview',
        
        // Informations destinataire
        email: invoice.client.email,
        name: invoice.client.name,
        
        // Informations facture
        invoiceNumber: invoice.invoiceNumber,
        invoiceDate: new Date(invoice.invoiceDate).toLocaleDateString('fr-FR'),
        totalAmount: formatCurrency(totalAmount),
        
        // Image de l'aper√ßu
        imageData: imageDataUrl.split(',')[1], // Enlever le pr√©fixe
        imageFilename: `apercu_facture_${invoice.invoiceNumber}.${format}`,
        imageSize: imageSizeKB,
        imageFormat: format.toUpperCase(),
        
        // Message
        message: previewMessage,
        
        // Informations entreprise
        companyName: 'MYCONFORT',
        companyEmail: 'myconfort@gmail.com',
        advisorName: invoice.advisorName || 'MYCONFORT',
        
        // M√©tadonn√©es
        appName: 'MYCONFORT - Partage Aper√ßu',
        generatedDate: new Date().toLocaleDateString('fr-FR'),
        generatedTime: new Date().toLocaleTimeString('fr-FR')
      };

      // Envoyer √† Google Apps Script
      const response = await fetch(GoogleAppsScriptService.SCRIPT_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
        mode: 'cors'
      });

      if (!response.ok) {
        throw new Error(`Erreur HTTP: ${response.status}`);
      }

      const result = await response.text();
      console.log('üì® R√©ponse partage aper√ßu:', result);

      return result.includes('Email envoy√©') || result.includes('success') || result.includes('OK');

    } catch (error: any) {
      console.error('‚ùå Erreur partage aper√ßu via Google Apps Script:', error);
      return false;
    }
  }

  /**
   * üß™ Test de la connexion avec Google Apps Script
   */
  static async testConnection(): Promise<{ success: boolean; message: string; responseTime?: number }> {
    try {
      console.log('üß™ TEST DE CONNEXION GOOGLE APPS SCRIPT');
      
      const startTime = Date.now();
      
      const testData = {
        requestType: 'test',
        message: 'Test de connexion depuis MYCONFORT',
        timestamp: new Date().toISOString()
      };

      const response = await fetch(GoogleAppsScriptService.SCRIPT_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(testData),
        mode: 'cors'
      });

      const responseTime = Date.now() - startTime;

      if (!response.ok) {
        return {
          success: false,
          message: `Erreur HTTP: ${response.status} ${response.statusText}`,
          responseTime
        };
      }

      const result = await response.text();
      console.log('üì® R√©ponse test:', result);

      return {
        success: true,
        message: `Connexion r√©ussie ! R√©ponse: ${result}`,
        responseTime
      };

    } catch (error: any) {
      console.error('‚ùå Erreur test connexion:', error);
      return {
        success: false,
        message: `Erreur de connexion: ${error.message}`
      };
    }
  }

  /**
   * G√©n√®re un message par d√©faut pour l'email
   */
  private static generateDefaultMessage(
    invoice: Invoice, 
    totalAmount: number, 
    acompteAmount: number, 
    montantRestant: number
  ): string {
    let message = `Bonjour ${invoice.client.name},\n\n`;
    message += `Veuillez trouver ci-joint votre facture n¬∞${invoice.invoiceNumber} g√©n√©r√©e avec notre syst√®me MYCONFORT.\n\n`;
    
    message += `üìã D√âTAILS DE LA FACTURE :\n`;
    message += `‚Ä¢ Num√©ro: ${invoice.invoiceNumber}\n`;
    message += `‚Ä¢ Date: ${new Date(invoice.invoiceDate).toLocaleDateString('fr-FR')}\n`;
    
    if (acompteAmount > 0) {
      message += `‚Ä¢ Total TTC: ${formatCurrency(totalAmount)}\n`;
      message += `‚Ä¢ Acompte vers√©: ${formatCurrency(acompteAmount)}\n`;
      message += `‚Ä¢ Montant restant √† payer: ${formatCurrency(montantRestant)}\n\n`;
    } else {
      message += `‚Ä¢ Montant total: ${formatCurrency(totalAmount)}\n\n`;
    }
    
    if (invoice.payment.method) {
      message += `üí≥ Mode de paiement: ${invoice.payment.method}\n\n`;
    }
    
    if (invoice.signature) {
      message += '‚úÖ Cette facture a √©t√© sign√©e √©lectroniquement et est juridiquement valide.\n\n';
    }
    
    message += `üìé Le PDF de votre facture est joint √† cet email.\n\n`;
    message += `Pour toute question, n'h√©sitez pas √† nous contacter.\n\n`;
    message += `Cordialement,\n${invoice.advisorName || 'L\'√©quipe MYCONFORT'}\n\n`;
    message += `---\nMYCONFORT\n`;
    message += `88 Avenue des Ternes, 75017 Paris\n`;
    message += `T√©l: 04 68 50 41 45\n`;
    message += `Email: myconfort@gmail.com\n`;
    message += `SIRET: 824 313 530 00027`;

    return message;
  }

  /**
   * Convertit un Blob en base64
   */
  private static async blobToBase64(blob: Blob): Promise<string> {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => {
        if (typeof reader.result === 'string') {
          resolve(reader.result);
        } else {
          reject(new Error('Erreur de conversion blob vers base64'));
        }
      };
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  }

  /**
   * Obtient l'URL du script pour information
   */
  static getScriptInfo(): { scriptId: string; scriptUrl: string; status: string } {
    return {
      scriptId: GoogleAppsScriptService.SCRIPT_ID,
      scriptUrl: GoogleAppsScriptService.SCRIPT_URL,
      status: '‚úÖ Configur√© et pr√™t'
    };
  }

  /**
   * Valide l'email avant envoi
   */
  static validateEmailData(invoice: Invoice): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];

    if (!invoice.client.email) {
      errors.push('Email du client requis');
    }

    if (!invoice.client.name) {
      errors.push('Nom du client requis');
    }

    if (invoice.products.length === 0) {
      errors.push('Au moins un produit requis');
    }

    const totalAmount = invoice.products.reduce((sum, product) => {
      return sum + calculateProductTotal(
        product.quantity,
        product.priceTTC,
        product.discount,
        product.discountType
      );
    }, 0);

    if (totalAmount <= 0) {
      errors.push('Montant total doit √™tre sup√©rieur √† 0');
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  }
}