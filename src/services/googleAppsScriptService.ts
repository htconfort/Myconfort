import { Invoice } from '../types';
import { formatCurrency, calculateProductTotal } from '../utils/calculations';
import { AdvancedPDFService } from './advancedPdfService';

export interface GoogleAppsScriptResponse {
  success: boolean;
  message: string;
  emailSent?: boolean;
  error?: string;
}

export class GoogleAppsScriptService {
  // üîë VOTRE SCRIPT ID CONFIRM√â
  private static readonly SCRIPT_ID = 'AKfycbwIj1kxUxR98Zp1zgWLAT3vazv8j3-0OpQyI29NHYn0ENpMVVIwqqaFi_A29XW_Ot4-';
  private static readonly SCRIPT_URL = `https://script.google.com/macros/s/${GoogleAppsScriptService.SCRIPT_ID}/exec`;

  /**
   * üìß Envoie la facture avec PDF via Google Apps Script
   */
  static async sendInvoiceWithPDF(invoice: Invoice, customMessage?: string): Promise<boolean> {
    try {
      console.log('üöÄ ENVOI FACTURE VIA GOOGLE APPS SCRIPT - SCRIPT CONFIRM√â');
      console.log('üîó Script URL:', GoogleAppsScriptService.SCRIPT_URL);
      console.log('üÜî Script ID:', GoogleAppsScriptService.SCRIPT_ID);
      
      // √âtape 1: G√©n√©rer le PDF identique √† l'aper√ßu
      console.log('üìÑ G√©n√©ration du PDF identique...');
      const pdfDoc = await AdvancedPDFService.generateInvoicePDF(invoice);
      const pdfBlob = pdfDoc.output('blob');
      const pdfSizeKB = Math.round(pdfBlob.size / 1024);
      
      // Convertir le PDF en base64
      const pdfBase64 = await this.blobToBase64(pdfBlob);
      
      // √âtape 2: Calculer les montants
      const totalAmount = invoice.products.reduce((sum, product) => {
        return sum + calculateProductTotal(
          product.quantity,
          product.priceTTC,
          product.discount,
          product.discountType
        );
      }, 0);

      const acompteAmount = invoice.payment.depositAmount || 0;
      const montantRestant = totalAmount - acompteAmount;

      // √âtape 3: Pr√©parer le message personnalis√©
      let emailMessage = customMessage || this.generateDefaultMessage(invoice, totalAmount, acompteAmount, montantRestant);

      // √âtape 4: Pr√©parer les donn√©es pour Google Apps Script (FORMAT COMPATIBLE)
      const requestData = {
        // Format principal pour votre script
        pdfBase64: pdfBase64.split(',')[1], // Enlever le pr√©fixe data:application/pdf;base64,
        filename: `facture_${invoice.invoiceNumber}.pdf`,
        
        // Informations destinataire
        email: invoice.client.email,
        clientName: invoice.client.name,
        name: invoice.client.name, // Alias pour compatibilit√©
        
        // Informations facture
        invoiceNumber: invoice.invoiceNumber,
        invoiceDate: new Date(invoice.invoiceDate).toLocaleDateString('fr-FR'),
        totalAmount: formatCurrency(totalAmount),
        
        // Message personnalis√©
        message: emailMessage,
        
        // Informations entreprise
        companyName: 'MYCONFORT',
        companyAddress: '88 Avenue des Ternes, 75017 Paris',
        companyPhone: '04 68 50 41 45',
        companyEmail: 'myconfort@gmail.com',
        companySiret: '824 313 530 00027',
        companyWebsite: 'https://www.htconfort.com',
        
        // Informations client d√©taill√©es
        clientAddress: `${invoice.client.address}, ${invoice.client.postalCode} ${invoice.client.city}`,
        clientPhone: invoice.client.phone,
        
        // Informations paiement et acompte
        paymentMethod: invoice.payment.method || 'Non sp√©cifi√©',
        depositAmount: acompteAmount > 0 ? formatCurrency(acompteAmount) : '',
        remainingAmount: acompteAmount > 0 ? formatCurrency(montantRestant) : '',
        
        // Informations conseiller
        advisor: invoice.advisorName || 'MYCONFORT',
        advisorName: invoice.advisorName || 'MYCONFORT',
        
        // M√©tadonn√©es
        appName: 'MYCONFORT - FactuSign Pro',
        generatedDate: new Date().toLocaleDateString('fr-FR'),
        generatedTime: new Date().toLocaleTimeString('fr-FR'),
        
        // Signature si pr√©sente
        hasSigned: !!invoice.signature,
        signatureStatus: invoice.signature ? 'Sign√© √©lectroniquement' : 'Non sign√©',
        
        // Informations produits (r√©sum√©)
        productsCount: invoice.products.length,
        hasDiscount: invoice.products.some(p => p.discount > 0)
      };

      // √âtape 5: Envoyer la requ√™te √† Google Apps Script avec timeout
      console.log('üì§ Envoi vers Google Apps Script...');
      console.log('üìä Taille PDF:', pdfSizeKB, 'KB');
      console.log('üìß Destinataire:', invoice.client.email);

      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 secondes timeout

      try {
        const response = await fetch(GoogleAppsScriptService.SCRIPT_URL, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(requestData),
          mode: 'cors',
          signal: controller.signal
        });

        clearTimeout(timeoutId);

        // √âtape 6: Traiter la r√©ponse
        if (!response.ok) {
          throw new Error(`Erreur HTTP: ${response.status} ${response.statusText}`);
        }

        const result = await response.text();
        console.log('üì® R√©ponse Google Apps Script:', result);

        // V√©rifier si l'envoi a r√©ussi - MISE √Ä JOUR POUR G√âRER VOTRE SCRIPT
        if (result.includes('Facture enregistr√©e') || result.includes('success') || result.includes('OK') || response.ok) {
          console.log('‚úÖ Email envoy√© avec succ√®s via Google Apps Script !');
          return true;
        } else {
          console.error('‚ùå √âchec de l\'envoi:', result);
          return false;
        }
      } catch (fetchError: any) {
        clearTimeout(timeoutId);
        throw fetchError;
      }

    } catch (error: any) {
      console.error('‚ùå Erreur lors de l\'envoi via Google Apps Script:', error);
      
      // Am√©lioration du message d'erreur avec diagnostic d√©taill√©
      let detailedError = this.generateDetailedErrorMessage(error);
      console.error('üîç Diagnostic d√©taill√©:', detailedError);
      
      // Lancer une erreur avec plus de contexte
      throw new Error(detailedError);
    }
  }

  /**
   * üì∏ Partage l'aper√ßu de la facture via Google Apps Script
   */
  static async sharePreviewViaScript(
    invoice: Invoice, 
    imageDataUrl: string, 
    imageSizeKB: number, 
    format: string = 'png'
  ): Promise<boolean> {
    try {
      console.log('üì∏ PARTAGE APER√áU VIA GOOGLE APPS SCRIPT');
      
      // Calculer les montants
      const totalAmount = invoice.products.reduce((sum, product) => {
        return sum + calculateProductTotal(
          product.quantity,
          product.priceTTC,
          product.discount,
          product.discountType
        );
      }, 0);

      const acompteAmount = invoice.payment.depositAmount || 0;
      const montantRestant = totalAmount - acompteAmount;

      // Message pour l'aper√ßu
      let previewMessage = `Bonjour ${invoice.client.name},\n\n`;
      previewMessage += `Voici l'aper√ßu de votre facture n¬∞${invoice.invoiceNumber} tel qu'il appara√Æt dans notre syst√®me MYCONFORT.\n\n`;
      previewMessage += `üìã D√âTAILS :\n`;
      previewMessage += `‚Ä¢ Num√©ro: ${invoice.invoiceNumber}\n`;
      previewMessage += `‚Ä¢ Date: ${new Date(invoice.invoiceDate).toLocaleDateString('fr-FR')}\n`;
      
      if (acompteAmount > 0) {
        previewMessage += `‚Ä¢ Total TTC: ${formatCurrency(totalAmount)}\n`;
        previewMessage += `‚Ä¢ Acompte vers√©: ${formatCurrency(acompteAmount)}\n`;
        previewMessage += `‚Ä¢ Montant restant: ${formatCurrency(montantRestant)}\n\n`;
      } else {
        previewMessage += `‚Ä¢ Montant total: ${formatCurrency(totalAmount)}\n\n`;
      }
      
      if (invoice.signature) {
        previewMessage += '‚úÖ Cette facture a √©t√© sign√©e √©lectroniquement.\n\n';
      }
      
      previewMessage += `üéØ L'image ci-jointe vous montre exactement l'aper√ßu de votre facture.\n\n`;
      previewMessage += `Cordialement,\n${invoice.advisorName || 'L\'√©quipe MYCONFORT'}`;

      // Pr√©parer les donn√©es pour Google Apps Script
      const requestData = {
        // Type de requ√™te
        requestType: 'sharePreview',
        
        // Informations destinataire
        email: invoice.client.email,
        name: invoice.client.name,
        
        // Informations facture
        invoiceNumber: invoice.invoiceNumber,
        invoiceDate: new Date(invoice.invoiceDate).toLocaleDateString('fr-FR'),
        totalAmount: formatCurrency(totalAmount),
        
        // Image de l'aper√ßu
        pdfBase64: imageDataUrl.split(',')[1], // Utiliser le m√™me format que pour les PDF
        filename: `apercu_facture_${invoice.invoiceNumber}.${format}`,
        imageSize: imageSizeKB,
        imageFormat: format.toUpperCase(),
        
        // Message
        message: previewMessage,
        
        // Informations entreprise
        companyName: 'MYCONFORT',
        companyEmail: 'myconfort@gmail.com',
        advisorName: invoice.advisorName || 'MYCONFORT',
        
        // M√©tadonn√©es
        appName: 'MYCONFORT - Partage Aper√ßu',
        generatedDate: new Date().toLocaleDateString('fr-FR'),
        generatedTime: new Date().toLocaleTimeString('fr-FR')
      };

      // Envoyer √† Google Apps Script avec timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000);

      try {
        const response = await fetch(GoogleAppsScriptService.SCRIPT_URL, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(requestData),
          mode: 'cors',
          signal: controller.signal
        });

        clearTimeout(timeoutId);

        if (!response.ok) {
          throw new Error(`Erreur HTTP: ${response.status}`);
        }

        const result = await response.text();
        console.log('üì® R√©ponse partage aper√ßu:', result);

        return result.includes('Facture enregistr√©e') || result.includes('success') || result.includes('OK') || response.ok;
      } catch (fetchError: any) {
        clearTimeout(timeoutId);
        throw fetchError;
      }

    } catch (error: any) {
      console.error('‚ùå Erreur partage aper√ßu via Google Apps Script:', error);
      
      // Am√©lioration du message d'erreur
      let detailedError = this.generateDetailedErrorMessage(error);
      console.error('üîç Diagnostic partage aper√ßu:', detailedError);
      
      throw new Error(detailedError);
    }
  }

  /**
   * üß™ Test de la connexion avec Google Apps Script
   */
  static async testConnection(): Promise<{ success: boolean; message: string; responseTime?: number }> {
    try {
      console.log('üß™ TEST DE CONNEXION GOOGLE APPS SCRIPT');
      console.log('üîó URL de test:', GoogleAppsScriptService.SCRIPT_URL);
      console.log('üÜî Script ID utilis√©:', GoogleAppsScriptService.SCRIPT_ID);
      
      const startTime = Date.now();
      
      const testData = {
        requestType: 'test',
        message: 'Test de connexion depuis MYCONFORT',
        timestamp: new Date().toISOString(),
        scriptId: GoogleAppsScriptService.SCRIPT_ID,
        testFrom: 'MYCONFORT Aper√ßu'
      };

      console.log('üì§ Envoi des donn√©es de test:', testData);

      // Add timeout to prevent hanging
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 seconds timeout

      try {
        const response = await fetch(GoogleAppsScriptService.SCRIPT_URL, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(testData),
          mode: 'cors',
          signal: controller.signal
        });

        clearTimeout(timeoutId);
        const responseTime = Date.now() - startTime;

        console.log('üìä R√©ponse HTTP status:', response.status);
        console.log('üìä Temps de r√©ponse:', responseTime, 'ms');

        if (!response.ok) {
          return {
            success: false,
            message: `‚ùå Erreur HTTP: ${response.status} ${response.statusText}. V√©rifiez que votre Google Apps Script est d√©ploy√© comme application web avec les bonnes permissions.`,
            responseTime
          };
        }

        const result = await response.text();
        console.log('üì® R√©ponse compl√®te du script:', result);

        // V√©rifier diff√©rents types de r√©ponses de succ√®s
        const isSuccess = result.includes('Test r√©ussi') || 
                         result.includes('success') || 
                         result.includes('OK') ||
                         result.includes('MYCONFORT Script actif') ||
                         result.includes('Script actif') ||
                         response.status === 200;

        return {
          success: isSuccess,
          message: isSuccess 
            ? `‚úÖ Connexion r√©ussie ! Script r√©pond: "${result}"`
            : `‚ö†Ô∏è Script accessible mais r√©ponse inattendue: "${result}"`,
          responseTime
        };

      } catch (fetchError: any) {
        clearTimeout(timeoutId);
        throw fetchError;
      }

    } catch (error: any) {
      console.error('‚ùå Erreur test connexion:', error);
      
      // G√©n√©rer un message d'erreur d√©taill√© pour le test
      const detailedError = this.generateDetailedErrorMessage(error);
      
      return {
        success: false,
        message: detailedError
      };
    }
  }

  /**
   * üîç G√©n√®re un message d'erreur d√©taill√© avec diagnostic
   */
  private static generateDetailedErrorMessage(error: any): string {
    let errorMessage = '‚ùå Erreur de connexion Google Apps Script:\n\n';
    
    if (error.name === 'AbortError') {
      errorMessage += '‚è±Ô∏è TIMEOUT - Le script met trop de temps √† r√©pondre (30s)\n\n';
      errorMessage += 'üîß SOLUTIONS POSSIBLES:\n';
      errorMessage += '‚Ä¢ V√©rifiez que votre script Google Apps Script fonctionne correctement\n';
      errorMessage += '‚Ä¢ Le script peut √™tre surcharg√© ou avoir des erreurs internes\n';
      errorMessage += '‚Ä¢ Consultez les logs d\'ex√©cution dans Google Apps Script\n\n';
    } else if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
      errorMessage += 'üåê IMPOSSIBLE DE JOINDRE LE SCRIPT\n\n';
      errorMessage += 'üîß V√âRIFICATIONS N√âCESSAIRES:\n';
      errorMessage += '1. ‚úÖ Script d√©ploy√© comme "Web app"\n';
      errorMessage += '2. ‚úÖ Permissions d√©finies sur "Anyone" ou "Anyone, even anonymous"\n';
      errorMessage += '3. ‚úÖ URL correcte avec /exec (pas /dev)\n';
      errorMessage += '4. ‚úÖ Script ID complet et correct\n';
      errorMessage += '5. ‚úÖ Connexion internet fonctionnelle\n\n';
      errorMessage += `üìã SCRIPT ACTUEL:\n`;
      errorMessage += `‚Ä¢ ID: ${GoogleAppsScriptService.SCRIPT_ID}\n`;
      errorMessage += `‚Ä¢ URL: ${GoogleAppsScriptService.SCRIPT_URL}\n\n`;
      errorMessage += 'üîó √âTAPES DE D√âPLOIEMENT:\n';
      errorMessage += '1. Allez sur script.google.com/home\n';
      errorMessage += '2. Ouvrez votre projet de script\n';
      errorMessage += '3. Cliquez sur "Deploy" > "New deployment"\n';
      errorMessage += '4. S√©lectionnez "Web app" comme type\n';
      errorMessage += '5. Configurez "Execute as: Me"\n';
      errorMessage += '6. Configurez "Who has access: Anyone"\n';
      errorMessage += '7. Cliquez "Deploy" et copiez l\'URL /exec\n\n';
    } else if (error.message.includes('CORS')) {
      errorMessage += 'üö´ ERREUR CORS - Probl√®me de permissions cross-origin\n\n';
      errorMessage += 'üîß SOLUTION:\n';
      errorMessage += '‚Ä¢ V√©rifiez que le script est configur√© pour accepter les requ√™tes externes\n';
      errorMessage += '‚Ä¢ Les permissions doivent √™tre sur "Anyone" ou "Anyone, even anonymous"\n\n';
    } else if (error.message.includes('HTTP')) {
      errorMessage += `üåê ERREUR HTTP: ${error.message}\n\n`;
      errorMessage += 'üîß V√âRIFICATIONS:\n';
      errorMessage += '‚Ä¢ Le script est-il correctement d√©ploy√© ?\n';
      errorMessage += '‚Ä¢ Y a-t-il des erreurs dans le code du script ?\n';
      errorMessage += '‚Ä¢ Consultez les logs d\'ex√©cution dans Google Apps Script\n\n';
    } else {
      errorMessage += `üîç ERREUR TECHNIQUE: ${error.message}\n\n`;
      errorMessage += 'üîß DIAGNOSTIC G√âN√âRAL:\n';
      errorMessage += '‚Ä¢ V√©rifiez la console du navigateur pour plus de d√©tails\n';
      errorMessage += '‚Ä¢ Testez l\'URL du script directement dans un navigateur\n';
      errorMessage += '‚Ä¢ Consultez les logs Google Apps Script\n\n';
    }
    
    errorMessage += 'üí° AIDE SUPPL√âMENTAIRE:\n';
    errorMessage += '‚Ä¢ Documentation: https://developers.google.com/apps-script/guides/web\n';
    errorMessage += '‚Ä¢ V√©rifiez les quotas et limites Google Apps Script\n';
    errorMessage += '‚Ä¢ Testez avec un script simple d\'abord\n';
    
    return errorMessage;
  }

  /**
   * G√©n√®re un message par d√©faut pour l'email
   */
  private static generateDefaultMessage(
    invoice: Invoice, 
    totalAmount: number, 
    acompteAmount: number, 
    montantRestant: number
  ): string {
    let message = `Bonjour ${invoice.client.name},\n\n`;
    message += `Veuillez trouver ci-joint votre facture n¬∞${invoice.invoiceNumber} g√©n√©r√©e avec notre syst√®me MYCONFORT.\n\n`;
    
    message += `üìã D√âTAILS DE LA FACTURE :\n`;
    message += `‚Ä¢ Num√©ro: ${invoice.invoiceNumber}\n`;
    message += `‚Ä¢ Date: ${new Date(invoice.invoiceDate).toLocaleDateString('fr-FR')}\n`;
    
    if (acompteAmount > 0) {
      message += `‚Ä¢ Total TTC: ${formatCurrency(totalAmount)}\n`;
      message += `‚Ä¢ Acompte vers√©: ${formatCurrency(acompteAmount)}\n`;
      message += `‚Ä¢ Montant restant √† payer: ${formatCurrency(montantRestant)}\n\n`;
    } else {
      message += `‚Ä¢ Montant total: ${formatCurrency(totalAmount)}\n\n`;
    }
    
    if (invoice.payment.method) {
      message += `üí≥ Mode de paiement: ${invoice.payment.method}\n\n`;
    }
    
    if (invoice.signature) {
      message += '‚úÖ Cette facture a √©t√© sign√©e √©lectroniquement et est juridiquement valide.\n\n';
    }
    
    message += `üìé Le PDF de votre facture est joint √† cet email.\n\n`;
    message += `Pour toute question, n'h√©sitez pas √† nous contacter.\n\n`;
    message += `Cordialement,\n${invoice.advisorName || 'L\'√©quipe MYCONFORT'}\n\n`;
    message += `---\nMYCONFORT\n`;
    message += `88 Avenue des Ternes, 75017 Paris\n`;
    message += `T√©l: 04 68 50 41 45\n`;
    message += `Email: myconfort@gmail.com\n`;
    message += `SIRET: 824 313 530 00027`;

    return message;
  }

  /**
   * Convertit un Blob en base64
   */
  private static async blobToBase64(blob: Blob): Promise<string> {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => {
        if (typeof reader.result === 'string') {
          resolve(reader.result);
        } else {
          reject(new Error('Erreur de conversion blob vers base64'));
        }
      };
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  }

  /**
   * Obtient l'URL du script pour information
   */
  static getScriptInfo(): { scriptId: string; scriptUrl: string; status: string } {
    return {
      scriptId: GoogleAppsScriptService.SCRIPT_ID,
      scriptUrl: GoogleAppsScriptService.SCRIPT_URL,
      status: '‚úÖ Configur√© avec votre script final'
    };
  }

  /**
   * Valide l'email avant envoi
   */
  static validateEmailData(invoice: Invoice): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];

    if (!invoice.client.email) {
      errors.push('Email du client requis');
    }

    if (!invoice.client.name) {
      errors.push('Nom du client requis');
    }

    if (invoice.products.length === 0) {
      errors.push('Au moins un produit requis');
    }

    const totalAmount = invoice.products.reduce((sum, product) => {
      return sum + calculateProductTotal(
        product.quantity,
        product.priceTTC,
        product.discount,
        product.discountType
      );
    }, 0);

    if (totalAmount <= 0) {
      errors.push('Montant total doit √™tre sup√©rieur √† 0');
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  }
}