import html2pdf from 'html2pdf.js';
import { Invoice } from '../types';
import { AdvancedPDFService } from './advancedPdfService';

export class PDFService {
  // üéØ M√âTHODE PRINCIPALE - PRIORIT√â ABSOLUE √Ä L'APER√áU HTML AFFICH√â (.facture-apercu)
  static async generateInvoicePDF(invoice: Invoice, elementId?: string): Promise<Blob> {
    try {
      console.log('üéØ G√âN√âRATION PDF IDENTIQUE √Ä L\'APER√áU AFFICH√â (.facture-apercu)');
      
      // ü•á PRIORIT√â 1: Chercher l'√©l√©ment .facture-apercu (votre conteneur exact)
      const factureApercuElement = document.querySelector('.facture-apercu') as HTMLElement;
      if (factureApercuElement) {
        console.log('‚úÖ Utilisation de l\'aper√ßu .facture-apercu (conteneur exact)');
        return await this.generateFromHTMLElementWithYourScript(invoice, factureApercuElement, 'facture-apercu');
      }
      
      // ü•á PRIORIT√â 2: Aper√ßu sp√©cifique demand√© (modal PDF, etc.)
      if (elementId) {
        const element = document.getElementById(elementId);
        if (element) {
          console.log(`‚úÖ Utilisation de l'aper√ßu sp√©cifique: ${elementId}`);
          return await this.generateFromHTMLElementWithYourScript(invoice, element, elementId);
        }
      }
      
      // ü•á PRIORIT√â 3: Aper√ßu principal de la facture (section principale)
      const mainPreviewElement = document.getElementById('facture-apercu');
      if (mainPreviewElement) {
        console.log('‚úÖ Utilisation de l\'aper√ßu principal de la facture');
        return await this.generateFromHTMLElementWithYourScript(invoice, mainPreviewElement, 'facture-apercu');
      }
      
      // ü•á PRIORIT√â 4: Aper√ßu dans le modal PDF
      const pdfPreviewElement = document.getElementById('pdf-preview-content');
      if (pdfPreviewElement) {
        console.log('‚úÖ Utilisation de l\'aper√ßu du modal PDF');
        return await this.generateFromHTMLElementWithYourScript(invoice, pdfPreviewElement, 'pdf-preview-content');
      }
      
      // ü•á PRIORIT√â 5: Recherche d'autres aper√ßus disponibles
      const invoicePreviewElement = document.querySelector('[id*="invoice"], [id*="apercu"], [class*="invoice"], [class*="apercu"]') as HTMLElement;
      if (invoicePreviewElement) {
        console.log('‚úÖ Utilisation d\'un aper√ßu trouv√© automatiquement');
        return await this.generateFromHTMLElementWithYourScript(invoice, invoicePreviewElement, 'apercu-automatique');
      }
      
      // üîÑ FALLBACK: Service avanc√© seulement si aucun aper√ßu HTML disponible
      console.warn('‚ö†Ô∏è Aucun aper√ßu HTML trouv√©, utilisation du service avanc√© (peut diff√©rer de l\'aper√ßu)');
      return await AdvancedPDFService.getPDFBlob(invoice);
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration PDF depuis aper√ßu:', error);
      throw new Error('Impossible de g√©n√©rer le PDF identique √† l\'aper√ßu');
    }
  }

  // üéØ M√âTHODE DE T√âL√âCHARGEMENT - PRIORIT√â ABSOLUE √Ä L'APER√áU HTML (.facture-apercu)
  static async downloadPDF(invoice: Invoice, elementId?: string): Promise<void> {
    try {
      console.log('üì• T√âL√âCHARGEMENT PDF IDENTIQUE √Ä L\'APER√áU (.facture-apercu)');
      
      // ü•á PRIORIT√â 1: Chercher l'√©l√©ment .facture-apercu (votre conteneur exact)
      const factureApercuElement = document.querySelector('.facture-apercu') as HTMLElement;
      if (factureApercuElement) {
        console.log('‚úÖ T√©l√©chargement depuis l\'aper√ßu .facture-apercu (conteneur exact)');
        await this.downloadFromHTMLElementWithYourScript(invoice, factureApercuElement, 'facture-apercu');
        return;
      }
      
      // ü•á PRIORIT√â 2: Aper√ßu sp√©cifique demand√©
      if (elementId) {
        const element = document.getElementById(elementId);
        if (element) {
          console.log(`‚úÖ T√©l√©chargement depuis l'aper√ßu sp√©cifique: ${elementId}`);
          await this.downloadFromHTMLElementWithYourScript(invoice, element, elementId);
          return;
        }
      }
      
      // ü•á PRIORIT√â 3: Aper√ßu principal de la facture
      const mainPreviewElement = document.getElementById('facture-apercu');
      if (mainPreviewElement) {
        console.log('‚úÖ T√©l√©chargement depuis l\'aper√ßu principal');
        await this.downloadFromHTMLElementWithYourScript(invoice, mainPreviewElement, 'facture-apercu');
        return;
      }
      
      // ü•á PRIORIT√â 4: Aper√ßu dans le modal PDF
      const pdfPreviewElement = document.getElementById('pdf-preview-content');
      if (pdfPreviewElement) {
        console.log('‚úÖ T√©l√©chargement depuis l\'aper√ßu du modal PDF');
        await this.downloadFromHTMLElementWithYourScript(invoice, pdfPreviewElement, 'pdf-preview-content');
        return;
      }
      
      // ü•á PRIORIT√â 5: Recherche automatique d'aper√ßus
      const invoicePreviewElement = document.querySelector('[id*="invoice"], [id*="apercu"], [class*="invoice"], [class*="apercu"]') as HTMLElement;
      if (invoicePreviewElement) {
        console.log('‚úÖ T√©l√©chargement depuis aper√ßu trouv√© automatiquement');
        await this.downloadFromHTMLElementWithYourScript(invoice, invoicePreviewElement, 'apercu-automatique');
        return;
      }
      
      // üîÑ FALLBACK: Service avanc√©
      console.warn('‚ö†Ô∏è Aucun aper√ßu HTML trouv√©, utilisation du service avanc√©');
      await AdvancedPDFService.downloadPDF(invoice);
    } catch (error) {
      console.error('‚ùå Erreur t√©l√©chargement PDF depuis aper√ßu:', error);
      throw new Error('Impossible de t√©l√©charger le PDF identique √† l\'aper√ßu');
    }
  }

  // üéØ G√âN√âRATION PDF AVEC VOTRE SCRIPT EXACT (WYSIWYG PARFAIT)
  private static async generateFromHTMLElementWithYourScript(invoice: Invoice, element: HTMLElement, elementId: string): Promise<Blob> {
    console.log(`üéØ G√©n√©ration PDF WYSIWYG avec votre script depuis: ${elementId}`);
    
    // Attendre que l'√©l√©ment soit compl√®tement rendu
    await this.waitForElementToRender(element);
    
    // üìã CONFIGURATION EXACTE DE VOTRE SCRIPT
    const opt = {
      margin: 0,
      filename: `facture_MYCONFORT_${invoice.invoiceNumber}.pdf`,
      html2canvas: { 
        scale: 2, 
        useCORS: true,
        letterRendering: true,
        allowTaint: true,
        backgroundColor: '#ffffff',
        logging: false,
        width: element.scrollWidth,
        height: element.scrollHeight,
        scrollX: 0,
        scrollY: 0,
        // Options suppl√©mentaires pour correspondance exacte
        foreignObjectRendering: true,
        removeContainer: false
      },
      jsPDF: { 
        unit: 'mm', 
        format: 'a4', 
        orientation: 'portrait',
        compress: true,
        precision: 16 // Haute pr√©cision pour correspondance exacte
      }
    };

    try {
      console.log('üîÑ Conversion HTML vers PDF avec votre script exact...');
      console.log('üìê Dimensions √©l√©ment:', {
        width: element.scrollWidth,
        height: element.scrollHeight,
        offsetWidth: element.offsetWidth,
        offsetHeight: element.offsetHeight
      });
      
      // üéØ UTILISATION EXACTE DE VOTRE SCRIPT
      const pdf = await html2pdf().set(opt).from(element).outputPdf('blob');
      console.log('‚úÖ PDF g√©n√©r√© avec correspondance exacte √† l\'aper√ßu (votre script)');
      return pdf;
    } catch (error) {
      console.error('‚ùå Erreur conversion HTML vers PDF avec votre script:', error);
      throw new Error(`Erreur lors de la conversion de l'aper√ßu ${elementId} en PDF avec votre script`);
    }
  }

  // üéØ T√âL√âCHARGEMENT DIRECT AVEC VOTRE SCRIPT EXACT
  private static async downloadFromHTMLElementWithYourScript(invoice: Invoice, element: HTMLElement, elementId: string): Promise<void> {
    console.log(`üì• T√©l√©chargement direct avec votre script depuis: ${elementId}`);
    
    // Attendre que l'√©l√©ment soit compl√®tement rendu
    await this.waitForElementToRender(element);
    
    // üìã CONFIGURATION EXACTE DE VOTRE SCRIPT
    const opt = {
      margin: 0,
      filename: `facture_MYCONFORT_${invoice.invoiceNumber}.pdf`,
      html2canvas: { 
        scale: 2, 
        useCORS: true,
        letterRendering: true,
        allowTaint: true,
        backgroundColor: '#ffffff',
        logging: false,
        width: element.scrollWidth,
        height: element.scrollHeight,
        scrollX: 0,
        scrollY: 0,
        foreignObjectRendering: true,
        removeContainer: false
      },
      jsPDF: { 
        unit: 'mm', 
        format: 'a4', 
        orientation: 'portrait',
        compress: true,
        precision: 16
      }
    };

    try {
      console.log('üîÑ T√©l√©chargement direct avec votre script exact...');
      
      // üéØ UTILISATION EXACTE DE VOTRE SCRIPT POUR T√âL√âCHARGEMENT
      await html2pdf().set(opt).from(element).save();
      console.log('‚úÖ PDF t√©l√©charg√© avec correspondance exacte √† l\'aper√ßu (votre script)');
    } catch (error) {
      console.error('‚ùå Erreur t√©l√©chargement avec votre script:', error);
      throw new Error(`Erreur lors du t√©l√©chargement du PDF depuis l'aper√ßu ${elementId} avec votre script`);
    }
  }

  // üïê ATTENDRE QUE L'√âL√âMENT SOIT COMPL√àTEMENT RENDU
  private static async waitForElementToRender(element: HTMLElement): Promise<void> {
    return new Promise((resolve) => {
      // Attendre que toutes les images soient charg√©es
      const images = element.querySelectorAll('img');
      let loadedImages = 0;
      
      if (images.length === 0) {
        // Pas d'images, attendre un court d√©lai pour le rendu CSS
        setTimeout(resolve, 100);
        return;
      }
      
      const checkAllImagesLoaded = () => {
        loadedImages++;
        if (loadedImages >= images.length) {
          // Toutes les images sont charg√©es, attendre un peu plus pour le rendu final
          setTimeout(resolve, 200);
        }
      };
      
      images.forEach((img) => {
        if (img.complete) {
          checkAllImagesLoaded();
        } else {
          img.onload = checkAllImagesLoaded;
          img.onerror = checkAllImagesLoaded; // Continuer m√™me si une image √©choue
        }
      });
      
      // Timeout de s√©curit√©
      setTimeout(resolve, 2000);
    });
  }

  // üñ®Ô∏è IMPRESSION DEPUIS L'APER√áU (.facture-apercu en priorit√©)
  static printInvoice(elementId: string, invoiceNumber: string): void {
    console.log(`üñ®Ô∏è Impression depuis l'aper√ßu: ${elementId}`);
    
    // ü•á PRIORIT√â 1: Chercher l'√©l√©ment .facture-apercu
    let printContent = document.querySelector('.facture-apercu') as HTMLElement;
    
    if (!printContent) {
      // Chercher l'√©l√©ment sp√©cifique demand√©
      printContent = document.getElementById(elementId);
      if (printContent) {
        console.log(`üîÑ Utilisation de l'√©l√©ment sp√©cifique: ${elementId}`);
      }
    } else {
      console.log('üîÑ Utilisation de l\'aper√ßu .facture-apercu pour l\'impression');
    }
    
    if (!printContent) {
      // Fallback: chercher l'aper√ßu principal
      printContent = document.getElementById('facture-apercu');
      if (printContent) {
        console.log('üîÑ Utilisation de l\'aper√ßu principal pour l\'impression');
      }
    }
    
    if (!printContent) {
      // Fallback: chercher l'aper√ßu du modal
      printContent = document.getElementById('pdf-preview-content');
      if (printContent) {
        console.log('üîÑ Utilisation de l\'aper√ßu du modal pour l\'impression');
      }
    }
    
    if (!printContent) {
      throw new Error('Aucun aper√ßu trouv√© pour l\'impression');
    }

    this.printFromElement(printContent, invoiceNumber);
  }

  // üñ®Ô∏è IMPRESSION DEPUIS UN √âL√âMENT SP√âCIFIQUE
  private static printFromElement(element: HTMLElement, invoiceNumber: string): void {
    const printWindow = window.open('', '_blank');
    
    if (!printWindow) {
      throw new Error('Impossible d\'ouvrir la fen√™tre d\'impression');
    }

    // Copier exactement le contenu et les styles de l'aper√ßu
    const elementClone = element.cloneNode(true) as HTMLElement;
    
    // R√©cup√©rer tous les styles CSS appliqu√©s
    const allStyles = Array.from(document.styleSheets)
      .map(styleSheet => {
        try {
          return Array.from(styleSheet.cssRules)
            .map(rule => rule.cssText)
            .join('\n');
        } catch (e) {
          console.warn('Impossible d\'acc√©der aux r√®gles CSS:', e);
          return '';
        }
      })
      .join('\n');

    printWindow.document.write(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>Facture ${invoiceNumber}</title>
          <meta charset="UTF-8">
          <link href="https://cdn.tailwindcss.com" rel="stylesheet">
          <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
          <style>
            body { 
              font-family: 'Inter', sans-serif; 
              margin: 0; 
              padding: 20px; 
              background: white;
              color: black;
              line-height: 1.5;
            }
            
            /* Styles pour l'impression */
            @media print {
              .no-print { display: none !important; }
              body { 
                -webkit-print-color-adjust: exact; 
                print-color-adjust: exact;
                margin: 0;
                padding: 10mm;
              }
              * { 
                print-color-adjust: exact; 
                -webkit-print-color-adjust: exact;
              }
              @page { 
                margin: 10mm; 
                size: A4;
              }
            }
            
            /* Pr√©servation des couleurs MYCONFORT */
            .bg-\\[\\#477A0C\\] { background-color: #477A0C !important; }
            .text-\\[\\#F2EFE2\\] { color: #F2EFE2 !important; }
            .text-\\[\\#477A0C\\] { color: #477A0C !important; }
            .text-black { color: black !important; }
            .font-bold { font-weight: bold !important; }
            .font-semibold { font-weight: 600 !important; }
            
            /* Styles r√©cup√©r√©s de la page */
            ${allStyles}
          </style>
        </head>
        <body class="bg-white">
          ${elementClone.innerHTML}
        </body>
      </html>
    `);
    
    printWindow.document.close();
    
    // Attendre que le contenu soit charg√© avant d'imprimer
    printWindow.onload = () => {
      setTimeout(() => {
        printWindow.print();
        // Fermer la fen√™tre apr√®s impression
        setTimeout(() => {
          printWindow.close();
        }, 1000);
      }, 500);
    };
  }

  // üîç M√âTHODE DE DIAGNOSTIC - LISTER LES APER√áUS DISPONIBLES
  static listAvailablePreviews(): string[] {
    const previews: string[] = [];
    
    // Chercher l'√©l√©ment .facture-apercu en priorit√©
    const factureApercuElement = document.querySelector('.facture-apercu');
    if (factureApercuElement) {
      previews.push('CLASS: .facture-apercu (PRIORIT√â 1 - Votre conteneur exact)');
    }
    
    // Chercher les aper√ßus par ID
    const previewIds = [
      'facture-apercu',
      'pdf-preview-content',
      'invoice-preview',
      'apercu-facture'
    ];
    
    previewIds.forEach(id => {
      const element = document.getElementById(id);
      if (element) {
        previews.push(`ID: ${id} (${element.tagName})`);
      }
    });
    
    // Chercher les aper√ßus par classe ou attribut
    const previewSelectors = [
      '[class*="invoice"]',
      '[class*="apercu"]',
      '[class*="preview"]',
      '[id*="invoice"]',
      '[id*="apercu"]'
    ];
    
    previewSelectors.forEach(selector => {
      const elements = document.querySelectorAll(selector);
      elements.forEach((element, index) => {
        const id = element.id || `${selector}-${index}`;
        previews.push(`Selector: ${selector} -> ${id} (${element.tagName})`);
      });
    });
    
    console.log('üîç Aper√ßus disponibles:', previews);
    return previews;
  }

  // üéØ M√âTHODE POUR TESTER VOTRE SCRIPT EXACT
  static async testYourScript(invoice: Invoice): Promise<void> {
    console.log('üß™ TEST DE VOTRE SCRIPT EXACT');
    
    // Chercher l'√©l√©ment .facture-apercu
    const element = document.querySelector('.facture-apercu') as HTMLElement;
    
    if (!element) {
      console.error('‚ùå √âl√©ment .facture-apercu non trouv√© pour le test');
      alert('√âl√©ment .facture-apercu non trouv√©. Assurez-vous que l\'aper√ßu est affich√©.');
      return;
    }
    
    // Configuration exacte de votre script
    const opt = {
      margin: 0,
      filename: 'facture_MYCONFORT.pdf',
      html2canvas: { scale: 2, useCORS: true },
      jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
    };
    
    try {
      console.log('üîÑ Test de votre script avec l\'√©l√©ment .facture-apercu...');
      await html2pdf().set(opt).from(element).save();
      console.log('‚úÖ Test r√©ussi ! PDF g√©n√©r√© avec votre script exact');
      alert('‚úÖ Test r√©ussi ! Le PDF a √©t√© g√©n√©r√© avec votre script exact.');
    } catch (error) {
      console.error('‚ùå Erreur lors du test de votre script:', error);
      alert('‚ùå Erreur lors du test. V√©rifiez la console pour plus de d√©tails.');
    }
  }
}