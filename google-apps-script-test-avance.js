/**
 * üöÄ SCRIPT DE TEST AVANC√â POUR MYCONFORT
 * 
 * Ce script plus complet inclut :
 * - Gestion des PDF en base64
 * - Sauvegarde dans Google Drive
 * - Envoi d'emails
 * - Tests de performance
 * - Logging d√©taill√©
 */

// üéØ CONFIGURATION - MODIFIEZ CES VALEURS
const CONFIG = {
  DRIVE_FOLDER_ID: '1sdCwbJHWu6QelYwAnQxPKNEOsd_XBtJw', // Votre dossier Google Drive
  EMAIL_FROM_NAME: 'MYCONFORT',
  DEBUG_MODE: true
};

function doPost(e) {
  const startTime = new Date().getTime();
  
  try {
    log('üì® Nouvelle requ√™te POST re√ßue');
    
    if (!e.postData || !e.postData.contents) {
      return createResponse('‚ùå Aucune donn√©e re√ßue', 400);
    }
    
    const data = JSON.parse(e.postData.contents);
    log('üìã Donn√©es pars√©es avec succ√®s');
    
    // Test de connexion
    if (data.requestType === 'test' || data.test === true) {
      return handleTestRequest(data, startTime);
    }
    
    // Traitement de facture
    if (data.pdfBase64 && data.filename) {
      return handleInvoiceRequest(data, startTime);
    }
    
    // Partage d'aper√ßu
    if (data.requestType === 'sharePreview') {
      return handlePreviewRequest(data, startTime);
    }
    
    return createResponse('‚úÖ Script MYCONFORT actif - Donn√©es re√ßues', 200);
    
  } catch (error) {
    logError('‚ùå Erreur dans doPost', error);
    return createResponse(`‚ùå Erreur: ${error.toString()}`, 500);
  }
}

function doGet(e) {
  log('üåê Requ√™te GET re√ßue');
  
  const html = `
    <html>
      <head><title>MYCONFORT Script Test</title></head>
      <body style="font-family: Arial; padding: 20px;">
        <h1>üå∏ MYCONFORT Script de Test</h1>
        <p><strong>Statut:</strong> ‚úÖ Actif et fonctionnel</p>
        <p><strong>Date:</strong> ${new Date().toLocaleString('fr-FR')}</p>
        <p><strong>Script ID:</strong> ${ScriptApp.getScriptId()}</p>
        <hr>
        <h2>Tests disponibles:</h2>
        <ul>
          <li>POST avec requestType: 'test' pour test de connexion</li>
          <li>POST avec pdfBase64 + filename pour test de facture</li>
          <li>POST avec requestType: 'sharePreview' pour test d'aper√ßu</li>
        </ul>
      </body>
    </html>
  `;
  
  return HtmlService.createHtmlOutput(html);
}

/**
 * üß™ GESTIONNAIRES DE REQU√äTES
 */

function handleTestRequest(data, startTime) {
  log('üß™ Test de connexion demand√©');
  
  const testResults = {
    script: '‚úÖ Script actif',
    drive: testDriveAccess(),
    email: testEmailCapability(),
    performance: `${new Date().getTime() - startTime}ms`
  };
  
  log('üìä R√©sultats du test:', testResults);
  
  return createResponse(`‚úÖ Test r√©ussi ! Script MYCONFORT actif - ${JSON.stringify(testResults)}`, 200);
}

function handleInvoiceRequest(data, startTime) {
  log('üìÑ Traitement de facture demand√©');
  
  try {
    const clientName = data.clientName || data.name || 'Client';
    const invoiceNumber = data.invoiceNumber || 'XXXX';
    const email = data.email;
    const filename = data.filename;
    
    log(`üìã Facture: ${invoiceNumber}, Client: ${clientName}, Email: ${email}`);
    
    // Sauvegarder le PDF dans Drive
    const driveResult = savePDFToDrive(data.pdfBase64, filename);
    
    // Envoyer par email si demand√©
    let emailResult = null;
    if (email && data.message) {
      emailResult = sendEmailWithPDF(email, data.message, data.pdfBase64, filename);
    }
    
    const processingTime = new Date().getTime() - startTime;
    
    const response = {
      status: '‚úÖ Facture trait√©e avec succ√®s',
      invoice: invoiceNumber,
      client: clientName,
      drive: driveResult,
      email: emailResult,
      processingTime: `${processingTime}ms`
    };
    
    log('üìä Traitement termin√©:', response);
    
    return createResponse(`‚úÖ Facture ${invoiceNumber} enregistr√©e avec succ√®s`, 200);
    
  } catch (error) {
    logError('‚ùå Erreur traitement facture', error);
    return createResponse(`‚ùå Erreur traitement: ${error.message}`, 500);
  }
}

function handlePreviewRequest(data, startTime) {
  log('üì∏ Partage d\'aper√ßu demand√©');
  
  try {
    const clientName = data.name || 'Client';
    const invoiceNumber = data.invoiceNumber || 'XXXX';
    
    // Simuler le partage d'aper√ßu
    log(`üìã Aper√ßu: ${invoiceNumber}, Client: ${clientName}`);
    
    const processingTime = new Date().getTime() - startTime;
    
    return createResponse(`‚úÖ Aper√ßu partag√© pour ${clientName} (${processingTime}ms)`, 200);
    
  } catch (error) {
    logError('‚ùå Erreur partage aper√ßu', error);
    return createResponse(`‚ùå Erreur partage: ${error.message}`, 500);
  }
}

/**
 * üîß FONCTIONS UTILITAIRES
 */

function savePDFToDrive(base64Data, filename) {
  try {
    if (!CONFIG.DRIVE_FOLDER_ID) {
      return '‚ö†Ô∏è Dossier Drive non configur√©';
    }
    
    const folder = DriveApp.getFolderById(CONFIG.DRIVE_FOLDER_ID);
    const blob = Utilities.newBlob(
      Utilities.base64Decode(base64Data),
      'application/pdf',
      filename
    );
    
    const file = folder.createFile(blob);
    log(`üíæ Fichier sauv√©: ${filename}`);
    
    return `‚úÖ Sauv√©: ${file.getUrl()}`;
  } catch (error) {
    logError('‚ùå Erreur sauvegarde Drive', error);
    return `‚ùå Erreur Drive: ${error.message}`;
  }
}

function sendEmailWithPDF(email, message, base64Data, filename) {
  try {
    const blob = Utilities.newBlob(
      Utilities.base64Decode(base64Data),
      'application/pdf',
      filename
    );
    
    GmailApp.sendEmail(
      email,
      `Facture MYCONFORT - ${filename}`,
      message,
      {
        attachments: [blob],
        name: CONFIG.EMAIL_FROM_NAME
      }
    );
    
    log(`üìß Email envoy√© √†: ${email}`);
    return `‚úÖ Email envoy√© √† ${email}`;
  } catch (error) {
    logError('‚ùå Erreur envoi email', error);
    return `‚ùå Erreur email: ${error.message}`;
  }
}

function testDriveAccess() {
  try {
    if (!CONFIG.DRIVE_FOLDER_ID) {
      return '‚ö†Ô∏è Dossier non configur√©';
    }
    
    const folder = DriveApp.getFolderById(CONFIG.DRIVE_FOLDER_ID);
    return `‚úÖ Acc√®s OK: ${folder.getName()}`;
  } catch (error) {
    return `‚ùå Pas d'acc√®s Drive: ${error.message}`;
  }
}

function testEmailCapability() {
  try {
    const quota = MailApp.getRemainingDailyQuota();
    return `‚úÖ Email OK (quota: ${quota})`;
  } catch (error) {
    return `‚ùå Pas d'acc√®s email: ${error.message}`;
  }
}

function createResponse(message, statusCode = 200) {
  return ContentService
    .createTextOutput(message)
    .setMimeType(ContentService.MimeType.TEXT);
}

function log(message, data = null) {
  if (CONFIG.DEBUG_MODE) {
    console.log(`[${new Date().toISOString()}] ${message}`, data || '');
  }
}

function logError(message, error) {
  console.error(`[${new Date().toISOString()}] ${message}:`, error);
}

/**
 * üéØ FONCTIONS DE TEST MANUEL
 */

function testCompletManuel() {
  log('üß™ Test complet manuel d√©marr√©');
  
  const tests = {
    environnement: verifierEnvironnement(),
    drive: testDriveAccess(),
    email: testEmailCapability(),
    connectivite: testConnectiviteAvance()
  };
  
  log('üìä R√©sultats des tests:', tests);
  return tests;
}

function verifierEnvironnement() {
  return {
    scriptId: ScriptApp.getScriptId(),
    utilisateur: Session.getActiveUser().getEmail(),
    timezone: Session.getScriptTimeZone(),
    version: ScriptApp.getService().getUrl()
  };
}

function testConnectiviteAvance() {
  try {
    const response = UrlFetchApp.fetch('https://httpbin.org/json');
    return response.getResponseCode() === 200 ? '‚úÖ Connectivit√© OK' : '‚ö†Ô∏è Connectivit√© limit√©e';
  } catch (error) {
    return `‚ùå Pas de connectivit√©: ${error.message}`;
  }
}

// Test avec donn√©es simul√©es
function simulerRequeteMYCOMFORT() {
  const testData = {
    requestType: 'test',
    clientName: 'Client Test',
    invoiceNumber: 'TEST-001',
    email: 'test@example.com',
    message: 'Test depuis le script',
    pdfBase64: 'JVBERi0xLjQKJdPr6eEKMSAwIG9iago8PAovVHlwZSAvQ2F0YWxvZwovUGFnZXMgMiAwIFIKPj4KZW5kb2JqCjIgMCBvYmoKPDwKL1R5cGUgL1BhZ2VzCi9LaWRzIFszIDAgUl0KL0NvdW50IDEKPD4KZW5kb2JqCjMgMCBvYmoKPDwKL1R5cGUgL1BhZ2UKL1BhcmVudCAyIDAgUgovTWVkaWFCb3ggWzAgMCA2MTIgNzkyXQovUmVzb3VyY2VzIDw8Ci9Gb250IDw8Ci9GMSA0IDAgUgo+Pgo+PgovQ29udGVudHMgNSAwIFIKPj4KZW5kb2JqCjQgMCBvYmoKPDwKL1R5cGUgL0ZvbnQKL1N1YnR5cGUgL1R5cGUxCi9CYXNlRm9udCAvSGVsdmV0aWNhCj4+CmVuZG9iago1IDAgb2JqCjw8Ci9MZW5ndGggNDQKPj4Kc3RyZWFtCkJUCi9GMSA4IFRmCjEwIDcwMCBUZAooVGVzdCBQREYpIFRqCkVUCmVuZHN0cmVhbQplbmRvYmoKeHJlZgowIDYKMDAwMDAwMDAwMCA2NTUzNSBmIAowMDAwMDAwMDA5IDAwMDAwIG4gCjAwMDAwMDAwNTggMDAwMDAgbiAKMDAwMDAwMDExNSAwMDAwMCBuIAowMDAwMDAwMjQ1IDAwMDAwIG4gCjAwMDAwMDAzMjIgMDAwMDAgbiAKdHJhaWxlcgo8PAovU2l6ZSA2Ci9Sb290IDEgMCBSCj4+CnN0YXJ0eHJlZgo0MTQKJSVFT0Y=',
    filename: 'test-facture.pdf'
  };
  
  const mockEvent = {
    postData: {
      contents: JSON.stringify(testData)
    }
  };
  
  return doPost(mockEvent);
}